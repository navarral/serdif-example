@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rrf: <http://kdeg.scss.tcd.ie/ns/rrf#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix geo: <http://www.opengis.net/ont/geosparql#>.
@prefix serdif: <https://serdif.adaptcentre.ie/kg/data/eeaData_20210623_RDF/> .
@prefix eionet:<http://dd.eionet.europa.eu/vocabulary/aq/pollutant/> .

@prefix sdmx:  <http://purl.org/linked-data/sdmx#> .
@prefix sdmx-concept:    <http://purl.org/linked-data/sdmx/2009/concept#> .
@prefix sdmx-dimension:  <http://purl.org/linked-data/sdmx/2009/dimension#> .
@prefix sdmx-attribute:  <http://purl.org/linked-data/sdmx/2009/attribute#> .
@prefix sdmx-measure:    <http://purl.org/linked-data/sdmx/2009/measure#> .
@prefix qb:  <http://purl.org/linked-data/cube#> .
@prefix eg:  <http://example.org/ns#> .


<#MapObsData>
 
	rr:logicalTable [ 
		 rr:sqlQuery """
		 SELECT * FROM hly1175_temp
		""";
	] ;
		
	rr:subjectMap [
		rrf:functionCall [
				rrf:function <#obsDateTimeUrl> ;
				rrf:parameterBindings (
					[ rr:column "DATE" ]
				) ;
		] ;
		rr:termType rr:IRI;
		rr:class qb:Observation;
	];		
	
	rr:predicateObjectMap [
		rr:predicate qb:dataSet;
		rr:objectMap	[
			rr:template "http://example.org/ns#dataset-met-20211012T120000-IE1175";
			rr:termType rr:IRI;
		];
	];
   	
	rr:predicateObjectMap [
		rr:predicate sdmx-dimension:timePeriod ;
		rr:objectMap  [ 
			rrf:functionCall [
	 			rrf:function <#obsDateTimeVal> ;
	 			rrf:parameterBindings (
	 				[ rr:column "DATE" ]
	 			) ;
	 		] ;
			rr:termType rr:Literal;
			rr:datatype xsd:dateTime;
		];		
   ];
	

   rr:predicateObjectMap [
		rr:predicate serdif:hasRain ;
		rr:objectMap  [ 
			rr:column "RAIN" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasTemp ;
		rr:objectMap  [ 
			rr:column "TEMP" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasWetb ;
		rr:objectMap  [ 
			rr:column "WETB" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasDewpt ;
		rr:objectMap  [ 
			rr:column "DEWPT" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasVappr ;
		rr:objectMap  [ 
			rr:column "VAPPR" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasRhum ;
		rr:objectMap  [ 
			rr:column "RHUM" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasMsl ;
		rr:objectMap  [ 
			rr:column "MSL" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasWdsp ;
		rr:objectMap  [ 
			rr:column "WDSP" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];

   rr:predicateObjectMap [
		rr:predicate serdif:hasWddir ;
		rr:objectMap  [ 
			rr:column "WDDIR" ;
			rr:termType rr:Literal ;
			rr:datatype xsd:float ;
		];		
	];
 	

.


<#obsDateTimeUrl>
	rrf:functionName "obsdatetimeurl" ;
	rrf:functionBody """
		function obsdatetimeurl(str_date) {
		  /// date_time - "2010-01-01 09:00:00 +01:00"
		  // Fix format date time to conform with standards
		  // "05-aug-2010 01:00" -> "20100805T000000Z"
		  // Fix format date time to conform with standards
		  function formatDate(date) {
			var d = new Date(date),
				month = '' + (d.getMonth() + 1),
				day = '' + d.getDate(),
				year = d.getFullYear();

			if (month.length < 2) 
			  month = '0' + month;
			if (day.length < 2) 
			  day = '0' + day;

			return [year, month, day].join('-');
		  }
		  var str_date_spl = str_date.split(" ");
		  var str_date_fix = formatDate(str_date_spl[0]) + "T" + str_date_spl[1] + ":00Z";	
		  var str_data_url = str_date_fix.replace(/-/g, '').replace(/:/g, '');	  
		  return "http://example.org/ns#dataset-met-20211012T120000-IE1175-obs-" + str_data_url ;
	}
	""" ;
.

<#obsDateTimeVal>
	rrf:functionName "obsdatetimeval" ;
	rrf:functionBody """
		function obsdatetimeval(str_date) {
		  /// date_time - "2010-01-01 09:00:00 +01:00"
		  // Fix format date time to conform with standards
		  // "05-aug-2010 01:00" -> "2010-08-05T01:00:00Z"
		  // Fix format date time to conform with standards
		  function formatDate(date) {
			var d = new Date(date),
				month = '' + (d.getMonth() + 1),
				day = '' + d.getDate(),
				year = d.getFullYear();

			if (month.length < 2) 
			  month = '0' + month;
			if (day.length < 2) 
			  day = '0' + day;

			return [year, month, day].join('-');
		  }
		  var str_date_spl = str_date.split(" ");
		  var str_date_fix = formatDate(str_date_spl[0]) + "T" + str_date_spl[1] + ":00Z";		  
		  return str_date_fix ;
	}
	""" ;
.